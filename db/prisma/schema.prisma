// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  phoneNumber   String?
  emailVerified Boolean  @default(false)
  phoneVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  QrCode        String?

  splitManagement SplitManagement[]
  splitParticipants SplitParticipant[]
  reccuringPayments ReccuringPayments[]
  trackExpenses TrackExpense[]

}

model SplitManagement {
  id           String @id @default(cuid())
  description  String
  Notification DateTime
  assigneeId   String  // The user who created the split and paid the money
  totalAmount  Float   // Total amount of the split
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  assignee User @relation(fields: [assigneeId], references: [id])
  trackExpenses TrackExpense[]
  splitParticipants SplitParticipant[] // People involved in the split
}

model SplitParticipant {
  id              String @id @default(cuid())
  splitId         String
  userId          String
  amountOwed      Float  // How much this person owes
  isPaid          Boolean @default(false)
  createdAt       DateTime @default(now())
  
  split SplitManagement @relation(fields: [splitId], references: [id], onDelete: Cascade)
  user  User @relation(fields: [userId], references: [id])
  
  @@unique([splitId, userId]) // Prevent duplicate participants in same split
}


model ReccuringPayments {
  id String @id @default(cuid())
  description String 
  amount Float // Monthly/recurring amount
  category String // Category from dropdown (Utilities, Rent, etc.)
  startDate DateTime // When the recurring payment starts
  frequency String // weekly, biweekly, monthly, quarterly, yearly
  paymentLink String? // URL for direct payment from notification emails
  userId String // User who created this recurring payment
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  trackExpenses TrackExpense[]
}


model TrackExpense {
  id          String   @id @default(cuid())
  amount      Float
  description String
  category    String   // e.g., "Food", "Transportation", "Entertainment", "Bills", etc.
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  
  // Receipt/proof
  receiptUrl  String?  // URL to uploaded receipt image
 
  // Tags for better organization
  tags        String[] // Array of custom tags
  
  // Expense type
  isRecurring Boolean  @default(false)
  recurringId String?  // Link to recurring expense if applicable
  
  // User relation
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Split Management relation (optional - if expense is part of a split)
  splitManagementId String?
  splitManagement   SplitManagement? @relation(fields: [splitManagementId], references: [id])
  
  // Recurring Payment relation (optional - if expense is from a recurring payment)
  recurringPaymentId String?
  recurringPayment   ReccuringPayments? @relation(fields: [recurringPaymentId], references: [id])
  
  // Indexes for better query performance
  @@index([userId])
  @@index([date])
  @@index([category])
  @@index([splitManagementId])
  @@index([recurringPaymentId])
}