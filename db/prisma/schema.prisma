// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  phoneNumber   String?
  emailVerified Boolean  @default(false)
  phoneVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  QrCode        String

  splitManagement SplitManagement?
  reccuringPayments ReccuringPayments?
  trackExpenses TrackExpense[]

}

model SplitManagement {
  id           String @id @default(cuid())
  description  String
  splitWith    String
  Notification DateTime
  SendNotifTo  String @unique

  user User @relation(fields: [SendNotifTo], references: [email])
  trackExpenses TrackExpense[]
}


model ReccuringPayments {
  id String @id @default(cuid())
  description String 
  provider String
  Notification DateTime
  SendNotifto String @unique

  user User @relation(fields: [SendNotifto] , references: [email])
  trackExpenses TrackExpense[]
}


model TrackExpense {
  id          String   @id @default(cuid())
  amount      Float
  description String
  category    String   // e.g., "Food", "Transportation", "Entertainment", "Bills", etc.
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  
  // Receipt/proof
  receiptUrl  String?  // URL to uploaded receipt image
 
  // Tags for better organization
  tags        String[] // Array of custom tags
  
  // Expense type
  isRecurring Boolean  @default(false)
  recurringId String?  // Link to recurring expense if applicable
  
  // User relation
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Split Management relation (optional - if expense is part of a split)
  splitManagementId String?
  splitManagement   SplitManagement? @relation(fields: [splitManagementId], references: [id])
  
  // Recurring Payment relation (optional - if expense is from a recurring payment)
  recurringPaymentId String?
  recurringPayment   ReccuringPayments? @relation(fields: [recurringPaymentId], references: [id])
  
  // Indexes for better query performance
  @@index([userId])
  @@index([date])
  @@index([category])
  @@index([splitManagementId])
  @@index([recurringPaymentId])
}